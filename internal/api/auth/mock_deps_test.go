// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go
//
// Generated by this command:
//
//	mockgen -source deps.go -package auth -typed -destination mock_deps_test.go
//

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockauthenticating is a mock of authenticating interface.
type Mockauthenticating struct {
	ctrl     *gomock.Controller
	recorder *MockauthenticatingMockRecorder
}

// MockauthenticatingMockRecorder is the mock recorder for Mockauthenticating.
type MockauthenticatingMockRecorder struct {
	mock *Mockauthenticating
}

// NewMockauthenticating creates a new mock instance.
func NewMockauthenticating(ctrl *gomock.Controller) *Mockauthenticating {
	mock := &Mockauthenticating{ctrl: ctrl}
	mock.recorder = &MockauthenticatingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockauthenticating) EXPECT() *MockauthenticatingMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *Mockauthenticating) Auth(ctx context.Context, username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", ctx, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockauthenticatingMockRecorder) Auth(ctx, username, password any) *MockauthenticatingAuthCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*Mockauthenticating)(nil).Auth), ctx, username, password)
	return &MockauthenticatingAuthCall{Call: call}
}

// MockauthenticatingAuthCall wrap *gomock.Call
type MockauthenticatingAuthCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockauthenticatingAuthCall) Return(arg0 string, arg1 error) *MockauthenticatingAuthCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockauthenticatingAuthCall) Do(f func(context.Context, string, string) (string, error)) *MockauthenticatingAuthCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockauthenticatingAuthCall) DoAndReturn(f func(context.Context, string, string) (string, error)) *MockauthenticatingAuthCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go
//
// Generated by this command:
//
//	mockgen -source deps.go -package info -typed -destination mock_deps_test.go
//

// Package info is a generated GoMock package.
package info

import (
	context "context"
	reflect "reflect"

	model "github.com/inna-maikut/avito-shop/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockinfoCollecting is a mock of infoCollecting interface.
type MockinfoCollecting struct {
	ctrl     *gomock.Controller
	recorder *MockinfoCollectingMockRecorder
}

// MockinfoCollectingMockRecorder is the mock recorder for MockinfoCollecting.
type MockinfoCollectingMockRecorder struct {
	mock *MockinfoCollecting
}

// NewMockinfoCollecting creates a new mock instance.
func NewMockinfoCollecting(ctrl *gomock.Controller) *MockinfoCollecting {
	mock := &MockinfoCollecting{ctrl: ctrl}
	mock.recorder = &MockinfoCollectingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockinfoCollecting) EXPECT() *MockinfoCollectingMockRecorder {
	return m.recorder
}

// Collect mocks base method.
func (m *MockinfoCollecting) Collect(ctx context.Context, employeeID int64) (model.EmployeeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collect", ctx, employeeID)
	ret0, _ := ret[0].(model.EmployeeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collect indicates an expected call of Collect.
func (mr *MockinfoCollectingMockRecorder) Collect(ctx, employeeID any) *MockinfoCollectingCollectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockinfoCollecting)(nil).Collect), ctx, employeeID)
	return &MockinfoCollectingCollectCall{Call: call}
}

// MockinfoCollectingCollectCall wrap *gomock.Call
type MockinfoCollectingCollectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockinfoCollectingCollectCall) Return(arg0 model.EmployeeInfo, arg1 error) *MockinfoCollectingCollectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockinfoCollectingCollectCall) Do(f func(context.Context, int64) (model.EmployeeInfo, error)) *MockinfoCollectingCollectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockinfoCollectingCollectCall) DoAndReturn(f func(context.Context, int64) (model.EmployeeInfo, error)) *MockinfoCollectingCollectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

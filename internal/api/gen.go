// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	// Password Пароль для аутентификации.
	Password string `json:"password"`

	// Username Имя пользователя для аутентификации.
	Username string `json:"username"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	// Token JWT-токен для доступа к защищенным ресурсам.
	Token *string `json:"token,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Errors Сообщение об ошибке, описывающее проблему.
	Errors *string `json:"errors,omitempty"`
}

// InfoResponse defines model for InfoResponse.
type InfoResponse struct {
	CoinHistory *struct {
		Received *[]struct {
			// Amount Количество полученных монет.
			Amount *int `json:"amount,omitempty"`

			// FromUser Имя пользователя, который отправил монеты.
			FromUser *string `json:"fromUser,omitempty"`
		} `json:"received,omitempty"`
		Sent *[]struct {
			// Amount Количество отправленных монет.
			Amount *int `json:"amount,omitempty"`

			// ToUser Имя пользователя, которому отправлены монеты.
			ToUser *string `json:"toUser,omitempty"`
		} `json:"sent,omitempty"`
	} `json:"coinHistory,omitempty"`

	// Coins Количество доступных монет.
	Coins     *int `json:"coins,omitempty"`
	Inventory *[]struct {
		// Quantity Количество предметов.
		Quantity *int `json:"quantity,omitempty"`

		// Type Тип предмета.
		Type *string `json:"type,omitempty"`
	} `json:"inventory,omitempty"`
}

// SendCoinRequest defines model for SendCoinRequest.
type SendCoinRequest struct {
	// Amount Количество монет, которые необходимо отправить.
	Amount int `json:"amount"`

	// ToUser Имя пользователя, которому нужно отправить монеты.
	ToUser string `json:"toUser"`
}

// PostApiAuthJSONRequestBody defines body for PostApiAuth for application/json ContentType.
type PostApiAuthJSONRequestBody = AuthRequest

// PostApiSendCoinJSONRequestBody defines body for PostApiSendCoin for application/json ContentType.
type PostApiSendCoinJSONRequestBody = SendCoinRequest

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXy27bRhT9FWLaJSspfQCBdnbRh7MKmhRZGF7Q0thianHomaELwRCgR9wmsGEXXRUB",
	"WqPtD9CqVNOyRP3CnT8q7iVlvW0ZsQMU8U4cjnjPnDl3zpl9VhBlX3jc04rl95kqlHjZoZ8rgS59x3cD",
	"rjQ++lL4XGqX00vfUepHIYv4u8hVQbq+doXH8gxOITQ1iOHSHFnQhktzYkFomqYBHeibBkTmFUTQhdD8",
	"BBFEGWazLSHLjmb50Wdtpis+Z3mmtHS9bVa1WaC49Jwyn1PyN+hhlUFSFc4hhhaEVJHKL4diqmLVZpLv",
	"Bq7kRZZfH5W3Ryg3rv4kNl/ygkaYCW3KF57is7xp8QP3Zlfw5MXzT0wDYugivCvAbYhN3TRMEwYQWtC1",
	"4BxC8wYi8wbnQd8cQs8yNeiYummamqlDCL35a5kB+pWUQi5GyvG1mkP2nxBDDGcphAg6Fj5aEJvXEMEZ",
	"LsHGoQFEpm4OaSeOaXbHggFJ4wwuoQM901wS6pq3JRYjLQjX+9ZVWsjK7EvJC9zd4yRUV/Oymp3ilEXg",
	"6TkrfYt6gsj8TPw2oAXxUGRNHEx2wBxY0IMY+tAxjbEFuZ7m21wi/i0pyt8rLm8tXduCLsSoDFMzh3Bh",
	"0QOSGEILIrgcK20Ol2QzHXCkdCr4rHiy+juhZxzf5S0o0uKdCYIYJTUHgjl8d5rmzUDhqWWJGe/l5Shx",
	"vT3uDVW9YHN2A8fTrq4srV48LKANPSyLVC7YDRqZ+eRfEMFg+iPhnfH5jHvFL4XrLXSd20nxit6pLupY",
	"OExn2AHE0IYIp061lmmYo3tXat804V/ozy2+hGTH7SlFZQ85mrUm6vRCIF1deYYun1C6yh3JJZoWPm3S",
	"09dDO37y4jmzk0yAX0rejqCUtPZZtUpS3RJkb67ewTcrT9eslT1XC0uVhM9stselSmh6lMllcsij8Lnn",
	"+C7Ls89oCH1VlwhU1vHdrJNi8kUiBRSCg1yvFVmePRVKr/guAU+Y4EqvimIlcQRPp4ea4/s7boH+l32p",
	"hDcKOfjrY8m3WJ59lB2loGwagbLj+ac6SbeWAaeBxJII86e53B2XTv2Oak9J7W9ThwF0zGvoQ3httDEn",
	"GST78ztENxkc5sH7HTrQgo6pUUK5oNiSWL+pp3AevWc4IbTS3ouGnQl9wvLFe6XmV2x606ATFL3xBHdv",
	"FJ1Cy9SJuIS+MJP0bVAuO+gDDH5ZvNEWRNPxBNPZZLaEMGPBKdJgkYKwUoxbdE04XnSmHSHYGM6hDSGd",
	"U3WSYsI09GheeiZDFzM2roV6ezOoZPfR0qrI6Daf0+DfcOzv1aCypnmZDgfplLnmmEnX95nr0XWBuj+5",
	"FZBFsuk2tcd2bvoE3Zjfwot7bRTBWoltP3TW/72zUkckTY174foGymOs8d5SckuteSIB0SZM2fWV0ofO",
	"eI3G8XbD7tFNJm5PN7jJg8I/XIWfXllHqvII+uYVrbuXesyxNRGsITQHNs3DmmQdIaIjJ4ooiSesRRbB",
	"DqFP29klX7kYaxOVRv8bA9/wjnBPoW/6CrJ88HvoqYeemu2pP6691lnQNjXThH+GF8L5Oes4k0C/qSyX",
	"e8N4FMid9IKWz2Z3RMHZKQml849zj3OsulH9LwAA//8p9wCT9xUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
